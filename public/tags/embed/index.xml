<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>embed on 虫子樱桃</title>
    <link>https://czyt.tech/tags/embed/</link>
    <description>Recent content in embed on 虫子樱桃</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 23 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://czyt.tech/tags/embed/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>go embed 使用小记</title>
      <link>https://czyt.tech/post/go-embed-usage-note/</link>
      <pubDate>Thu, 23 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://czyt.tech/post/go-embed-usage-note/</guid>
      <description>​ go embed 是go 1.16 开始添加的特性，允许嵌入文件及文件夹，在Go程序中进行使用。官方还为此添加了embed.FS的对象。下面将常用的使用场景进行简单列举：
嵌入单个文件 官方的例子
嵌入文件并绑定到字符串变量 import _ &amp;#34;embed&amp;#34; //go:embed hello.txt var s string print(s) 嵌入文件并绑定到字节变量 import _ &amp;#34;embed&amp;#34; //go:embed hello.txt var b []byte print(string(b)) 嵌入文件并绑定到文件对象 import &amp;#34;embed&amp;#34; //go:embed hello.txt var f embed.FS data, _ := f.ReadFile(&amp;#34;hello.txt&amp;#34;) print(string(data)) 嵌入目录 嵌入时，可以在多行或者一行输入要嵌入的文件和文件夹。
package server import &amp;#34;embed&amp;#34; // content holds our static web server content. //go:embed image/* template/* //go:embed html/index.html var content embed.FS 在匹配文件夹时，embed会嵌入包括子目录下的所有除.和_开头的文件（递归），所以上面的代码大致等价于下面的代码：
// content is our static web server content.</description>
    </item>
    
    <item>
      <title>Golang嵌入可执行程序</title>
      <link>https://czyt.tech/post/golang-embed-executable-file/</link>
      <pubDate>Wed, 23 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://czyt.tech/post/golang-embed-executable-file/</guid>
      <description>reddit链接 On Linux it might be possible to use the memfd_create system call, but that&amp;rsquo;s not portable to other operating systems.
need go 1.16 +
package main import ( _ &amp;#34;embed&amp;#34; &amp;#34;log&amp;#34; &amp;#34;os&amp;#34; &amp;#34;os/exec&amp;#34; &amp;#34;strconv&amp;#34; &amp;#34;golang.org/x/sys/unix&amp;#34; ) //go:embed binary var embeddedBinary []byte func main() { fd, err := unix.MemfdCreate(&amp;#34;embedded_binary&amp;#34;, 0) if err != nil { log.Fatal(err) } path := &amp;#34;/proc/&amp;#34; + strconv.Itoa(os.Getpid()) + &amp;#34;/fd/&amp;#34; + strconv.Itoa(int(fd)) err = os.WriteFile(path, embeddedBinary, 0755) if err !</description>
    </item>
    
  </channel>
</rss>
