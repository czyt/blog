<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>kratos on 虫子樱桃</title>
    <link>https://czyt.tech/tags/kratos/</link>
    <description>Recent content in kratos on 虫子樱桃</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 12 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://czyt.tech/tags/kratos/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>go-kratos使用备忘</title>
      <link>https://czyt.tech/post/go-kratos-usage-memo/</link>
      <pubDate>Fri, 12 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://czyt.tech/post/go-kratos-usage-memo/</guid>
      <description>自定义接口返回内容 正常的响应序列化逻辑通过Response Encoder实现。
错误的序列化逻辑通过ErrorEncoder实现。
注意：自定义Encoder后，可能会遇到零值字段被忽略的情况，可以参考这个issue。具体的解决办法是
proto定义返回内容，然后将生成的类型在encoder中使用。
简单代码大致如下：
proto定义
import &amp;#34;google/protobuf/any.proto&amp;#34;; // BaseResponse is the base response message BaseResponse{ int32 code = 1 [json_name = &amp;#34;code&amp;#34;]; google.protobuf.Any data = 2 [json_name = &amp;#34;data&amp;#34;]; } go代码
func CustomResponseEncoder() http.ServerOption { return http.ResponseEncoder(func(w http.ResponseWriter, r *http.Request, i interface{}) error { reply := &amp;amp;v1.BaseResponse{ Code: 0, } if m, ok := i.(proto.Message); ok { payload, err := anypb.New(m) if err != nil { return err } reply.</description>
    </item>
    
    <item>
      <title>为Kratos prtobuf文件添加多种编译输出</title>
      <link>https://czyt.tech/post/add-muti-kinds-output-for-kratos/</link>
      <pubDate>Fri, 08 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://czyt.tech/post/add-muti-kinds-output-for-kratos/</guid>
      <description>Csharp 安装Grpc.tools https://www.nuget.org/packages/Grpc.Tools/
下载解压 nupkg文件（改扩展名为zip），也可以使用附件的7z包
解压 找到tools中对应系统架构的软件，设置下环境变量，让系统可以找到就行。
Linux 需要创建一个符号链接
ln -s `which grpc_csharp_plugin` /usr/bin/protoc-gen-grpc-csharp 修改Kratos项目的Make文件 在api这个make任务中添加下面内容
--csharp_out=./api/pipe/v1 \ --grpc-csharp_out=./api/pipe/v1 \ 完整内容为
.PHONY: api # generate api proto api: protoc --proto_path=./api \ --proto_path=./third_party \ --go_out=paths=source_relative:./api \ --go-http_out=paths=source_relative:./api \ --go-grpc_out=paths=source_relative:./api \ --csharp_out=./api/pipe/v1 \ --grpc-csharp_out=./api/pipe/v1 \ --openapi_out==paths=source_relative:. \ 参考
https://github.com/grpc/grpc/blob/master/src/csharp/BUILD-INTEGRATION.md
📎tools.7z
Python 安装必要包 pip install grpclib protobuf 查询路径 which protoc-gen-grpclib_python 或者 which protoc-gen-python_grpc我这里返回信息如下： ➜ czyt which protoc-gen-grpclib_python /usr/sbin/protoc-gen-grpclib_python 如法炮制，创建软链接 ln -s /usr/sbin/protoc-gen-grpclib_python /usr/sbin/protoc-gen-grpc_python 修改Makefile 添加下面的内容,再执行make api生成api即可。 --python_out=.</description>
    </item>
    
  </channel>
</rss>
