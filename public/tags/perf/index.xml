<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>perf on 虫子樱桃</title>
    <link>https://czyt.tech/tags/perf/</link>
    <description>Recent content in perf on 虫子樱桃</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 11 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://czyt.tech/tags/perf/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go性能优化参考</title>
      <link>https://czyt.tech/post/golang-perf-reference/</link>
      <pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://czyt.tech/post/golang-perf-reference/</guid>
      <description>电子书 编写和优化Go代码 Go Optimizations 101 https://github.com/dgryski/go-perfbook https://github.com/DataDog/go-profiler-notes https://github.com/bobstrecansky/HighPerformanceWithGo/ Go package https://github.com/aclements/go-perf 文章 官方博客 Profiling Go Programs
https://sumercip.com/posts/inside-the-go-cpu-profiler/
How to Write Benchmarks in Go : https://dave.cheney.net/2013/06/30/how-to-write-benchmarks-in-go
Debugging performance issues in Go programs : https://github.com/golang/go/wiki/Performance
Go execution tracer : https://blog.gopheracademy.com/advent-2017/go-execution-tracer/ (see also the The tracer design doc link)
A whirlwind tour of Go’s runtime environment variables (see godebug) : https://dave.cheney.net/2015/11/29/a-whirlwind-tour-of-gos-runtime-environment-variables
benchstat : https://godoc.org/golang.org/x/perf/cmd/benchstat
pyroscope: 一个简单易用的持续剖析平台
VSCODE可视化调试Go程序
Jetbrains官方Goland代码调试文档
https://github.com/cch123/perf_workshop_2021
GO高性能编程精华
Go 语言中各式各样的优化手段
Go 中简单的内存节省技巧</description>
    </item>
    
  </channel>
</rss>
