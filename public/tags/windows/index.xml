<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>windows on 虫子樱桃</title>
    <link>https://czyt.tech/tags/windows/</link>
    <description>Recent content in windows on 虫子樱桃</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 31 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://czyt.tech/tags/windows/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>浅谈windows默认Shell的替换</title>
      <link>https://czyt.tech/post/a-brief-talk-about-replace-windows-default-shell-with-wpf/</link>
      <pubDate>Wed, 31 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://czyt.tech/post/a-brief-talk-about-replace-windows-default-shell-with-wpf/</guid>
      <description>Windows XP时代 Xp时代提供的是通过注册表来自定义shell
设置所有用户的shell 注册表键HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell
设置当前用户的shell注册表键 HKEY_Current_User\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell
注册表键值类型 REG_SZ
值修改为你要自定义为shell的程序的完整路径。
在windows10下使用该技巧可能会出现黑屏的现象，参考stackoverflow的回答
Simply replacing the &amp;ldquo;explorer.exe&amp;rdquo; (HKLM\SOFTWARE\Microsoft\Window NT\Winlogon\Shell) with a custom app location provided a black screen.
A much simpler way, and it works great, was to create a BATCH script to call the custom app through elevated powershell&amp;hellip;
powershell -nologo -noprofile -executionpolicy bypass -command &amp;#34;start-process -verb &amp;#39;runas&amp;#39; -filepath &amp;lt;full path of custom app executable&amp;gt;&amp;#34; By replacing &amp;ldquo;explorer.exe&amp;rdquo; with this batch script I was able to successfully create a kiosk style lockdown under Windows 10 PRO with a non-UWP app.</description>
    </item>
    
    <item>
      <title>Git小技巧</title>
      <link>https://czyt.tech/post/git-tricks/</link>
      <pubDate>Fri, 17 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://czyt.tech/post/git-tricks/</guid>
      <description>Windows下GIT的几个小技巧 记住git密码 使用下面命令可以设置记住git密码，但推荐使用ssh进行操作。
git config credential.helper store 设置换行符转换 在windows下开发时，迁出的代码是CRLF会导致编译的sh脚本不能正确执行:
git config --global core.autocrlf false Git推送到多个服务器 要实现一次push到多个远程仓库 本机git仓库A https://aaaaa.git 要同步push的远程git仓库B https://bbbbb.git
通过git remote add添加 先使用git remote -v查看远程仓库的情况 ,然后添加一个git仓库
git remote add b https://bbbbb.git 再次查看远程仓库情况，如果需要push，则需要push两次
通过git remote set-url 添加 如果按上面添加过remote分支，需要先git remote rm b,使用下面命令添加即可。
git remote set-url --add a https://bbbbb.git 查看远程仓库情况，看看是否已经是两个push地址了 。这个只需push一次就行了
修改配置文件 打开 .git/config 找到 [remote &amp;ldquo;github&amp;rdquo;]，添加对应的 url 即可，效果如下。这种方法其实和方法二是一样的。
[remote &amp;#34;a&amp;#34;] url = https://aaaaa.git fetch = +refs/heads/*:refs/remotes/a/* url = https://bbbbb.git 参考链接
● 一个项目push到多个远程Git仓库 https://segmentfault.</description>
    </item>
    
    <item>
      <title>grpc-golang windows环境搭建说明</title>
      <link>https://czyt.tech/post/grpc-golang-setup-in-windows/</link>
      <pubDate>Mon, 28 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://czyt.tech/post/grpc-golang-setup-in-windows/</guid>
      <description>下载protoc，打开链接 下载后将对应的文件解压到gopath的bin目录。 下载protoc的golang插件。下载地址 链接 下载后放在protoc的同级目录（需要改扩展名为exe） 测试，定义一个Proto syntax = &amp;#34;proto3&amp;#34;; option go_package = &amp;#34;.;hello&amp;#34;; package main; message String { string value = 1; } 然后执行命令 protoc hello.proto --go_out=. ,大功告成，生成的文件内容如下：
// Code generated by protoc-gen-go. DO NOT EDIT. // versions: // protoc-gen-go v1.24.0-devel // protoc v3.12.3 // source: hello.proto package hello import ( proto &amp;#34;github.com/golang/protobuf/proto&amp;#34; protoreflect &amp;#34;google.golang.org/protobuf/reflect/protoreflect&amp;#34; protoimpl &amp;#34;google.golang.org/protobuf/runtime/protoimpl&amp;#34; reflect &amp;#34;reflect&amp;#34; sync &amp;#34;sync&amp;#34; ) const ( // Verify that this generated code is sufficiently up-to-date.</description>
    </item>
    
    <item>
      <title>Rust安装及配置</title>
      <link>https://czyt.tech/post/rust-setup-and-config/</link>
      <pubDate>Mon, 28 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://czyt.tech/post/rust-setup-and-config/</guid>
      <description>下载rustup 从此处下载
设置rustup镜像 字节提供的镜像 https://rsproxy.cn
export RUSTUP_DIST_SERVER=&amp;#34;https://rsproxy.cn&amp;#34; export RUSTUP_UPDATE_ROOT=&amp;#34;https://rsproxy.cn/rustup&amp;#34; 设置两个环境变量即可 设置环境变量 RUSTUP_DIST_SERVER (用于更新 toolchain)
export RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static 以及 RUSTUP_UPDATE_ROOT (用于更新 rustup)
export RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup crates.io 镜像 编辑 ~/.cargo/config [source.crates-io]replace-with = &amp;#39;rsproxy&amp;#39;[source.rsproxy]registry = &amp;#34;https://rsproxy.cn/crates.io-index&amp;#34;[registries.rsproxy]index = &amp;#34;https://rsproxy.cn/crates.io-index&amp;#34;[net]git-fetch-with-cli = true 安装Rust 安装rust即可。可以参考我的步骤
Current installation options: default host triple: x86_64-pc-windows-msvc default toolchain: stable (default) profile: default modify PATH variable: yes 1) Proceed with installation (default) 2) Customize installation 3) Cancel installation &amp;gt;2 I&amp;#39;m going to ask you the value of each of these installation options.</description>
    </item>
    
  </channel>
</rss>
